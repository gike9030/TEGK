@using FlashcardsApp.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Html

@inject UserManager<FlashcardsAppUser> UserManager


@model IEnumerable<FlashcardsApp.Models.FlashcardCollection<Flashcards>>

@{
    ViewData["Title"] = "Feed";
    var categories = Enum.GetNames(typeof(FlashcardsApp.Models.Category));
    var backgroundImagePath = Url.Content("~/images/ggg.jpg"); 

}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<div class= "full-screen-image-container"></div>

<form asp-action="Index" method="get" class="mb-3 text-center sort-form">
<label for="sortByCategory" class="sort-label">Sort:</label>
<select id="sortByCategory" name="sortByCategory" onchange="this.form.submit();" class="sort-select">
    <option value="">All Categories</option>
        @foreach (var category in categories)
        {
            if (category == ViewBag.CurrentSort)
            {
                <option value="@category" selected>@category</option>
            }
            else
            {
                <option value="@category">@category</option>
            }
    }
</select>
</form>

<div class="content-above-background">
@* <h1 class="text-center">@ViewData["Title"]</h1> *@

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-warning">
        @TempData["ErrorMessage"]
    </div>
}

<div class="flashcard-feed">
    @foreach (var collection in Model)
    {
        var userId = UserManager.GetUserId(User);
        var userReactionType = collection.Reactions.FirstOrDefault(r => r.UserId == userId)?.Type;

        <div class="flashcard-item">
            <div class="collection-card">
                <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-right">
                        @if (collection.FlashcardsAppUserId == UserManager.GetUserId(User))
                        {
                            <a asp-action="Edit" asp-route-id="@collection.Id" class="dropdown-item">Edit</a>
                            <a class="dropdown-item" href="#" onclick="event.preventDefault(); if(confirm('Are you sure you want to delete this collection?')) { document.getElementById('deleteForm-@collection.Id').submit(); }">Delete</a>
                        }
                        <a asp-action="ViewCollection" asp-route-id="@collection.Id" class="dropdown-item">View</a>
                    </div>
                </div>

                <div class="card-content text-center">
                    <h2>@collection.CollectionName</h2>
                    <span>@collection.Category</span>
                </div>

                <form id="deleteForm-@collection.Id" asp-action="Delete" asp-route-id="@collection.Id" method="post" style="display:none;"></form>
                <div class="play-button">
                    <a href="@Url.Action("PlayCollection", "FlashcardCollection", new { id = collection.Id })" class="btn btn-primary">
                        <i class="fas fa-play"></i> Play
                    </a>
                </div>

                <div class="reaction-buttons-container">
                    <button class="reaction-toggle-btn">
                            @GetReactionIcon(collection.Reactions, UserManager.GetUserId(User))
                    </button>
                        <div class="reactions">
                            @foreach (var reactionType in Enum.GetNames(typeof(ReactionType)))
                            {
                                var isUserReaction = userReactionType.ToString() == reactionType;
                                <form asp-action="ToggleReaction" asp-controller="Reactions" method="post">
                                    <input type="hidden" name="CollectionId" value="@collection.Id" />
                                    <input type="hidden" name="ReactionType" value="@reactionType" />
                                    <button type="submit" class="reaction-btn" data-reaction-type="@reactionType" disabled="@(!isUserReaction && userReactionType.HasValue)">
                                        @GetEmoji(reactionType)
                                        <span class="reaction-count">
                                            @(collection.ReactionCounts.TryGetValue(Enum.Parse<ReactionType>(reactionType), out var count) ? count.ToString() : "0")
                                        </span>
                                    </button>
                                </form>
                            }
                        </div>

                </div>
            </div>
            <div class="comment-section">
                <h2>Comments</h2>
                <div class="comments-container">
                    @foreach (var comment in collection.Comments)
                    {
                        <div class="comment">
                            <strong>@comment.FirstName:</strong> @comment.Content
                        </div>
                    }
                </div>
                <div class="add-comment-section">
                    <form asp-controller="Comments" asp-action="Create" method="post" class="comment-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="FlashcardCollectionId" value="@collection.Id" />
                        <div class="input-group">
                            <input type="text" name="Content" placeholder="Write a comment..." required class="form-control" />
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-primary">Post</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

    <div class="text-center mt-3">
        <a asp-action="CreateFlashcardCollection" class="btn btn-create-collection">Create New Collection</a>
    </div>

</div>

@functions {
    private ReactionType? GetUserReactionType(IEnumerable<Reaction<Flashcards>> reactions, string userId)
    {
        return reactions.FirstOrDefault(r => r.UserId == userId)?.Type;
    }
    private IHtmlContent GetReactionIcon(IEnumerable<Reaction<Flashcards>> reactions, string userId)
    {
        var userReactionType = GetUserReactionType(reactions, userId);
        bool isUserReaction = userReactionType.HasValue;
        return GetEmoji(userReactionType?.ToString(), isUserReaction);
    }
    public IHtmlContent GetEmoji(string reactionType, bool isSelected = false)
    {
        string emojiFileName = "";
        string cssClass = isSelected ? "emoji-selected" : "emoji"; 

        switch (reactionType)
        {
            case "Hearts":
                emojiFileName = "love.png";
                break;
            case "Haha":
                emojiFileName = "laugh.png";
                break;
            case "Like":
                emojiFileName = "shocked.png";
                break;
            case "Angry":
                emojiFileName = "angry.png";
                break;
            default:
                return new HtmlString("+"); 
        }

        if (!string.IsNullOrEmpty(emojiFileName))
        {
            string imageUrl = Url.Content($"~/images/emojis/{emojiFileName}");
            return new HtmlString($"<img src='{imageUrl}' alt='{reactionType}' class='{cssClass}' />");
        }
        else
        {
            return HtmlString.Empty;
        }
    }
}

<style>
    html, body {
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

    .emoji {
        width: 24px;
        height: 24px;
        vertical-align: middle;
    }

    .emoji-selected {
        width: 44px;
        height: 44px;
        vertical-align: middle;
    }

    .sort-form {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 5px;
        border-radius: 15px;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        margin-left: 32%;
        margin-right: 32%;
    }

    .sort-label {
        margin-right: 10px;
    }

    .sort-select {
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 5px 10px;
        background-color: white;
    }


    .full-screen-image-container {
        position: fixed;
        margin-left: -15%;
        width: 100vw;
        height: 120vh;
        overflow: hidden;
        background-image: url('@backgroundImagePath'); 
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -1; 
    }

    .content-above-background {
        position: relative;
        z-index: 1; 
    }


        .full-screen-image-container::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 10%, rgba(255, 255, 255, 0) 90%, rgba(255, 255, 255, 1) 100%);
            z-index: 2;
        }

    .navbar {
        position: relative;
        z-index: 10;
    }

    .reaction-buttons-container {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }
    .reaction-toggle-btn {
        background: #fffffb;
        border: 1px solid #ccc;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        font-size: 24px;
        transition: all 0.3s;
        cursor: pointer;
        z-index: 2; 
    }

    .reactions {
        display: none;
        position: absolute;
        bottom: 100%; 
        right: 0;
        transition: all 0.3s;
        z-index: 1;
    }

    .reaction-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%; 
        padding: 10px; 
        margin: 5px;
        transition: transform 0.3s;
        cursor: pointer;
        border: 1px solid #fffffb;
        font-size: 17px; 
    }

    .reaction-count {
        margin-left: 7px; 
        font-size: 15px;
    }

    .reaction-buttons-container:hover .reactions {
        display: block;
    }

    .reaction-buttons-container:hover .reaction-toggle-btn {
        transform: rotate(45deg);
    }

    .reaction-btn:active {
        transform: scale(1.2);
    }

    .add-comment-section .comment-form {
        display: flex;
        align-items: center;
        margin-top: 15px;
    }

    .add-comment-section .input-group {
        width: 100%;
        display: flex;
    }

    .add-comment-section .form-control {
        flex-grow: 1; 
        margin-right: 8px; 
        border-radius: 15px;
        border: 1px solid #fffffb;
        padding: 10px;
    }

    .add-comment-section .btn-primary {
        padding: 10px 16px;
        border: none;
        border-radius: 15px;
        background-color: #007bff;
        color: #fffffb;
        cursor: pointer;
    }

        .add-comment-section .btn-primary:hover {
            background-color: #0056b3;
        }

    .add-comment-section form {
        display: flex;
        flex-direction: column;
        margin-top: 15px;
    }

    .add-comment-section textarea {
        width: 100%;
        height: 70px;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #fffffb;
        border-radius: 15px;
        resize: none; 
    }

    .add-comment-section button {
        width: auto;
        padding: 8px 16px;
        border: none;
        border-radius: 15px;
        background-color: #007bff;
        color: #fffffb;
        cursor: pointer;
        align-self: flex-end;
    }

        .add-comment-section button:hover {
            background-color: #0056b3;
        }

    .flashcard-feed {
        margin-top: 0px;
    }

    .flashcard-item {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: flex-start;
        width: 90%;
        margin-bottom: 20px;
    }

 
    .card-content {
        flex-grow: 1; 
    }

    .collection-card, .comment-section {
        flex: 1; 
        margin: 10px; 
        background: #fffffb;
    }
    .comment-section {
        display: flex;
        flex-direction: column;
        justify-content: space-between; 
        height: 300px; 
            flex: 1;
        max-width: 500px;
        min-width: 200px; 
        width: 50%; 
        height: 290px;
        background-color: #fffffb;
        border: 1px solid #ddd;
        border-radius: 15px;
        padding: 15px;
        position: relative;
        margin-top: 65px;
        margin-right: 10px;
    }

    .comments-container {
        max-height: 300px; 
        overflow-y: auto;
    }

    .comment {
        background-color: #fffffb;
        border: 1px solid #ccc;
        border-radius: 25px;
        padding: 8px 15px;
        margin-bottom: 10px;
        word-wrap: break-word;
    }

    .collection-card {
        flex: 0 0 30%; 
        margin-right: 20px;
        width: 10px;
        height: 300px;
        border: 1px solid #fffffb;
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        margin-top: 60px;
    }

        .collection-card:hover {
            box-shadow: 0 8px 15px rgba(0,0,0,0.3);
            transform: scale(1.03);
        }

        .collection-card .play-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .collection-card:hover .play-button {
            opacity: 1;
        }

    .dropdown {
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .btn-sm.dropdown-toggle {
        padding: 0.125rem 0.3rem;
        font-size: 0.675rem;
    }

    .btn-create-collection {
        background-color: #007bff; 
        color: white;
        padding: 10px 16px;
        border: none;
        border-radius: 8px;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-create-collection:hover {
            background-color: #0056b3; 
        }

</style>
